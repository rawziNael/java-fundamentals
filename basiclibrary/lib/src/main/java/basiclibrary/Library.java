/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }
    public static void main(String[] args) {
        roll(4);
        int[] arr = {5,5,10,11,9,3,11};
        containsDuplicates(arr);
    }

    public static int[] roll(int n) {
        int[] r = new int[n];
        for (int i = 0; i < n; i++) {
            int random = (int) Math.ceil(Math.random() * 6);
            r[i] = random;
        }
        return r;
    }

    public static boolean containsDuplicates(int[] arr) {
        boolean duplicate = false;
        for (int i = 0; i < arr.length; i++) {
            for (int j = 1; j < i; j++) {
                if (arr[j] == arr[i]) {
                    duplicate = true;
                }
            }
        }
        return duplicate;
    }

    public static double average(int[] arr) {
        double sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        return sum / arr.length;
    }
    public static int[] lowestAverage(int[][] arrays) {
        int[] lowest = arrays[0];
        double lowestAvg = average(lowest);
        for (int[] set : arrays) {
            if (average(set) < lowestAvg) {
                lowest = set;
            }
        }
        return lowest;
    }

    //lab03 (Analyzing Weather Data & Tallying Election)

    public static String analyzingWeatherData(int[][] data) {
        int min = data[0][0];
        int max = data[0][0];
        HashSet<Integer> temps = new HashSet<>();

        for (int[] week : data) {
            for (int temp : week) {
                if (temp < min) {
                    min = temp;
                }
                if (temp > max) {
                    max = temp;
                }
                temps.add(temp);
            }
        }
        String result = "High: " + max + "\n" + "Low: " + min;
        String very = "";

        for (int i = min; i < max; i++) {
            if (!temps.contains(i)) {
                very += "\n" + "Never saw temperature: " + i;
            }
        }
        return result + very;
    }

    //tally election
    public static String tally(List<String> arr) {
        String winner  = arr.get(0);
        HashMap<String, Integer> results = new HashMap<>();
        for(String candidate : arr) {
            if (results.containsKey(candidate)) {
                results.put(candidate, results.get(candidate) + 1);
            } else {
                results.put(candidate, 1);
            }
            if (results.get(candidate) > results.get(winner )) {
                winner  = candidate;
            }
        }
        return winner ;
    }
}
